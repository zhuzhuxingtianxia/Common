//
//  XGCalendarView.m
//  XGVaccine
//
//  Created by Aaron Yu on 15/5/21.
//  Copyright (c) 2015年 Aaron. All rights reserved.
//

#define KCurrentDayColor [UIColor colorWithRed:122.0 / 255.0 green:133.0 / 255.0 blue:152.0 / 255.0 alpha:1.0]

#import "XGCalendarView.h"
#import "XGBaseDataItem.h"
#import "NSDate+Addition.h"
#import "NSDate+Utilities.h"

@interface XGCalendarView()

{
    
    NSCalendar *gregorian;
    NSInteger _selectedMonth;
    NSInteger _selectedYear;
}

@end
@implementation XGCalendarView

- (id)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self)
    {
        markedArray = [[NSMutableArray alloc] init];
    }
    return self;
}

- (void)setMarkItems:(NSArray *)array
{
    [markedArray removeAllObjects];
    [markedArray addObjectsFromArray:array];
}

- (void)drawRect:(CGRect)rect
{
    [self.subviews makeObjectsPerformSelector:@selector(removeFromSuperview)];

    CGFloat lastHeight = 0;

    [self setCalendarParameters];
    NSDateComponents *components = [gregorian components:(NSEraCalendarUnit | NSYearCalendarUnit | NSMonthCalendarUnit | NSDayCalendarUnit) fromDate:self.calendarDate];
    
    components.day = 1;
    NSDate *firstDayOfMonth = [gregorian dateFromComponents:components];
    NSDateComponents *comps = [gregorian components:NSWeekdayCalendarUnit fromDate:firstDayOfMonth];
    int weekday = [comps weekday];
    weekday  = weekday - 1;
    
    if(weekday < 0)
        weekday += 7;
    
    NSCalendar *c = [NSCalendar currentCalendar];
    NSRange days = [c rangeOfUnit:NSDayCalendarUnit
                           inUnit:NSMonthCalendarUnit
                          forDate:self.calendarDate];
    
    NSInteger columns = 7;
    CGFloat width = CETC_SCREEN_WIDTH / 7.0;
    NSInteger originX = 0;
    NSInteger monthLength = days.length;
    
    UIView *viewLastBg = [[UIView alloc] initWithFrame:CGRectMake(0, 0, self.frame.size.width, self.frame.size.height)];
    viewLastBg.backgroundColor = [UIColor whiteColor];
    [self addSubview:viewLastBg];
    //本月日期
    
    NSDate *today = [NSDate date];
    
    for (NSInteger i= 0; i<monthLength; i++)
    {
        UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];
        button.tag = i+1;
        button.titleLabel.text = [NSString stringWithFormat:@"%d",i+1];
        [button setTitle:[NSString stringWithFormat:@"%d",i+1] forState:UIControlStateNormal];
        [button setTitleColor:KCurrentDayColor forState:UIControlStateNormal];
        [button.titleLabel setFont:[UIFont boldSystemFontOfSize:17.0]];
        [button addTarget:self action:@selector(tappedDate:) forControlEvents:UIControlEventTouchUpInside];
        NSInteger offsetX = (width*((i+weekday)%columns));
        NSInteger offsetY = (width *((i+weekday)/columns));
        [button setFrame:CGRectMake(originX+offsetX, offsetY, width, width)];
        
        lastHeight = offsetY + width;
        
        NSLog(@"%d",button.tag);

        if(i+1 ==today.day && components.month == today.month && components.year == today.year)
        {
            [self addTodayStyleForButton:button];
        }
        
        [self addSubview:button];
    }
    
    //上月日期
    NSDateComponents *previousMonthComponents = [gregorian components:(NSEraCalendarUnit | NSYearCalendarUnit | NSMonthCalendarUnit | NSDayCalendarUnit) fromDate:self.calendarDate];
    previousMonthComponents.month -=1;
    NSDate *previousMonthDate = [gregorian dateFromComponents:previousMonthComponents];
    NSRange previousMonthDays = [c rangeOfUnit:NSDayCalendarUnit
                                        inUnit:NSMonthCalendarUnit
                                       forDate:previousMonthDate];
    NSInteger maxDate = previousMonthDays.length - weekday;
    
    for (int i=0; i<weekday; i++)
    {
        UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];
        button.titleLabel.text = [NSString stringWithFormat:@"%d",maxDate+i+1];
        [button setTitle:[NSString stringWithFormat:@"%d",maxDate+i+1] forState:UIControlStateNormal];
        NSInteger offsetX = (width*(i%columns));
        NSInteger offsetY = (width *(i/columns));
        [button setFrame:CGRectMake(originX+offsetX, offsetY, width, width)];
        
        [button setTitleColor:XG_GRAY_COLOR forState:UIControlStateNormal];
//        [button.titleLabel setFont:[UIFont fontWithName:@"HelveticaNeue" size:15.0f]];
        [button.titleLabel setFont:[UIFont boldSystemFontOfSize:17.0]];
        [button setEnabled:NO];
        [self addSubview:button];
    }
    
    //下月日期
    
    NSInteger remainingDays = (monthLength + weekday) % columns;
    if(remainingDays >0)
    {
        for (int i=remainingDays; i<columns; i++)
        {
            UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];
            button.titleLabel.text = [NSString stringWithFormat:@"%d",(i+1)-remainingDays];
            [button setTitle:[NSString stringWithFormat:@"%d",(i+1)-remainingDays] forState:UIControlStateNormal];
            NSInteger offsetX = (width*((i) %columns));
            NSInteger offsetY = (width *((monthLength+weekday)/columns));
            [button setFrame:CGRectMake(originX+offsetX, offsetY, width, width)];
            
            lastHeight = offsetY + width;
            
            [button setTitleColor:XG_GRAY_COLOR forState:UIControlStateNormal];
            [button.titleLabel setFont:[UIFont boldSystemFontOfSize:17.0]];
            [button setEnabled:NO];
            [self addSubview:button];
        }
    }
    
    [self setUpButtons];
}

-(void)tappedDate:(UIButton *)sender
{
    NSLog(@"%d",sender.tag);
    gregorian = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];
    NSDateComponents *components = [gregorian components:(NSEraCalendarUnit | NSYearCalendarUnit | NSMonthCalendarUnit | NSDayCalendarUnit) fromDate:self.calendarDate];
    if(!(_selectedDate == sender.tag && _selectedMonth == [components month] && _selectedYear == [components year]))
    {
        if(_selectedDate != -1)
        {
            UIButton *previousSelected =(UIButton *) [self viewWithTag:_selectedDate];
            [self removeStyleForButton:previousSelected];
        }
        
        [self addSelectStyleForButton:sender];
        
        _selectedDate = sender.tag;
        NSDateComponents *components = [gregorian components:(NSEraCalendarUnit | NSYearCalendarUnit | NSMonthCalendarUnit | NSDayCalendarUnit) fromDate:self.calendarDate];
        components.day = _selectedDate;
        _selectedMonth = components.month;
        _selectedYear = components.year;
        NSDate *clickedDate = [gregorian dateFromComponents:components];
        [self.delegate tappedOnDate:clickedDate];
    }
}

- (void)reDraw
{
    [self.subviews makeObjectsPerformSelector:@selector(removeFromSuperview)];
    [self setNeedsDisplay];
}

-(void)setCalendarParameters
{
    if(gregorian == nil)
    {
        gregorian = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];
        NSDateComponents *components = [gregorian components:(NSEraCalendarUnit | NSYearCalendarUnit | NSMonthCalendarUnit | NSDayCalendarUnit) fromDate:self.calendarDate];
        _selectedDate  = components.day;
        _selectedMonth = components.month;
        _selectedYear = components.year;
    }
}

- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer *)gestureRecognizer
{
    return YES;
}

- (void)setUpButtons
{
    for (XGVaccine *item in markedArray)
    {
        if ([item.reserveDate length] > 0)
        {
            int day = [NSDate dateFromString:item.reserveDate].day;
            if (0 != day)
            {
                UIButton *markButton =(UIButton *) [self viewWithTag:day];
                [self addMarkedStyleForButton:markButton];
            }
        }
        else if ([item.beginDate length] > 0)
        {
            NSDate *date = [NSDate dateFromString:item.beginDate];
            
            NSDate *firstDate = [[self.calendarDate monthFirstDate] dateByAddingDays:-1];
            NSDate *lastDate = [[self.calendarDate monthLastDate] dateByAddingDays:1];
            
            if ([date isEarlierThanDate:lastDate] && [date isLaterThanDate:firstDate])
            {
                int day = date.day;
                if (0 != day)
                {
                    UIButton *markButton =(UIButton *) [self viewWithTag:day];
                    [self addMarkedStyleForButton:markButton];
                }
            }
        }
    }
}

- (void)addSelectStyleForButton:(UIButton *)button
{
    [self removeStyleForButton:button];
    
    CALayer *layer = [[CALayer alloc] init];
    [layer setName:@"selectedLayer"];
    layer.frame = CGRectMake((CGRectGetWidth(button.frame) - CONTENT_PIXEL(40)) / 2, (CGRectGetWidth(button.frame) - CONTENT_PIXEL(40)) / 2, CONTENT_PIXEL(40), CONTENT_PIXEL(40));
    
    layer.backgroundColor = [UIColor clearColor].CGColor;
    layer.cornerRadius = CONTENT_PIXEL(40) / 2;
    layer.borderWidth = 1.0;
    layer.borderColor = XG_BLUE_COLOR.CGColor;
    layer.masksToBounds = YES;
    [button.layer insertSublayer:layer atIndex:0];
}

- (void)addTodayStyleForButton:(UIButton *)button
{
    [self removeStyleForButton:button];

    [button setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];

    CALayer *layer = [[CALayer alloc] init];
    [layer setName:@"todayLayer"];
    layer.frame = CGRectMake((CGRectGetWidth(button.frame) - CONTENT_PIXEL(40)) / 2, (CGRectGetWidth(button.frame) - CONTENT_PIXEL(40)) / 2, CONTENT_PIXEL(40), CONTENT_PIXEL(40));
    
    layer.backgroundColor = XG_BLUE_COLOR.CGColor;

    layer.cornerRadius = CONTENT_PIXEL(40) / 2;
    layer.masksToBounds = YES;
    
    [button.layer insertSublayer:layer atIndex:0];
}

- (void)addMarkedStyleForButton:(UIButton *)button
{
    [self removeStyleForButton:button];
    
    CALayer *layer = [[button.layer sublayers] objectAtIndex:0];
    if (![layer.name isEqualToString:@"todayLayer"])
    {
        [button setTitleColor:XG_BLUE_COLOR forState:UIControlStateNormal];
        [button.layer setName:@"markedLayer"];
    }
}

- (void)removeStyleForButton:(UIButton *)button
{
    for (CALayer *layer in [button.layer sublayers])
    {
        if ([layer.name isEqualToString:@"selectedLayer"])
        {
            [layer removeFromSuperlayer];
            break;
        }
    }
    
    NSString *marked = button.layer.name;
    if ([marked isEqualToString:@"markedLayer"] && ![button.layer.name isEqualToString:@"todayLayer"])
    {
        [button setTitleColor:XG_BLUE_COLOR forState:UIControlStateNormal];
    }
}

@end
